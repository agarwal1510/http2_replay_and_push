{"requestURL":"https://t24mobile.com/lib/xml2json.js","requestMethod":"GET","requestHeaders":{"Referer":"https://t24mobile.com/","User-Agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36"},"responseURL":"https://t24mobile.com/lib/xml2json.js","responseStatus":200,"responseStatusText":"OK","responseProtocol":"http/1.1","responseBody":"/*\r\n Copyright 2011-2013 Abdulla Abdurakhmanov\r\n Original sources are available at https://code.google.com/p/x2js/\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n(function (root, factory) {\r\n     if (typeof define === \"function\" && define.amd) {\r\n         define([], factory);\r\n     } else if (typeof exports === \"object\") {\r\n         module.exports = factory();\r\n     } else {\r\n         root.X2JS = factory();\r\n     }\r\n }(this, function () {\r\n\treturn function (config) {\r\n\t\t'use strict';\r\n\t\t\t\r\n\t\tvar VERSION = \"1.2.0\";\r\n\t\t\r\n\t\tconfig = config || {};\r\n\t\tinitConfigDefaults();\r\n\t\tinitRequiredPolyfills();\r\n\t\t\r\n\t\tfunction initConfigDefaults() {\r\n\t\t\tif(config.escapeMode === undefined) {\r\n\t\t\t\tconfig.escapeMode = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconfig.attributePrefix = config.attributePrefix || \"_\";\r\n\t\t\tconfig.arrayAccessForm = config.arrayAccessForm || \"none\";\r\n\t\t\tconfig.emptyNodeForm = config.emptyNodeForm || \"text\";\t\t\r\n\t\t\t\r\n\t\t\tif(config.enableToStringFunc === undefined) {\r\n\t\t\t\tconfig.enableToStringFunc = true; \r\n\t\t\t}\r\n\t\t\tconfig.arrayAccessFormPaths = config.arrayAccessFormPaths || []; \r\n\t\t\tif(config.skipEmptyTextNodesForObj === undefined) {\r\n\t\t\t\tconfig.skipEmptyTextNodesForObj = true;\r\n\t\t\t}\r\n\t\t\tif(config.stripWhitespaces === undefined) {\r\n\t\t\t\tconfig.stripWhitespaces = true;\r\n\t\t\t}\r\n\t\t\tconfig.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];\r\n\t\r\n\t\t\tif(config.useDoubleQuotes === undefined) {\r\n\t\t\t\tconfig.useDoubleQuotes = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconfig.xmlElementsFilter = config.xmlElementsFilter || [];\r\n\t\t\tconfig.jsonPropertiesFilter = config.jsonPropertiesFilter || [];\r\n\t\t\t\r\n\t\t\tif(config.keepCData === undefined) {\r\n\t\t\t\tconfig.keepCData = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tvar DOMNodeTypes = {\r\n\t\t\tELEMENT_NODE \t   : 1,\r\n\t\t\tTEXT_NODE    \t   : 3,\r\n\t\t\tCDATA_SECTION_NODE : 4,\r\n\t\t\tCOMMENT_NODE\t   : 8,\r\n\t\t\tDOCUMENT_NODE \t   : 9\r\n\t\t};\r\n\t\t\r\n\t\tfunction initRequiredPolyfills() {\t\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction getNodeLocalName( node ) {\r\n\t\t\tvar nodeLocalName = node.localName;\t\t\t\r\n\t\t\tif(nodeLocalName == null) // Yeah, this is IE!! \r\n\t\t\t\tnodeLocalName = node.baseName;\r\n\t\t\tif(nodeLocalName == null || nodeLocalName==\"\") // ==\"\" is IE too\r\n\t\t\t\tnodeLocalName = node.nodeName;\r\n\t\t\treturn nodeLocalName;\r\n\t\t}\r\n\t\t\r\n\t\tfunction getNodePrefix(node) {\r\n\t\t\treturn node.prefix;\r\n\t\t}\r\n\t\t\t\r\n\t\tfunction escapeXmlChars(str) {\r\n\t\t\tif(typeof(str) == \"string\")\r\n\t\t\t\treturn str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\r\n\t\t\telse\r\n\t\t\t\treturn str;\r\n\t\t}\r\n\t\r\n\t\tfunction unescapeXmlChars(str) {\r\n\t\t\treturn str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").replace(/&amp;/g, '&');\r\n\t\t}\r\n\t\t\r\n\t\tfunction checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {\r\n\t\t\tvar idx = 0;\r\n\t\t\tfor(; idx < stdFiltersArrayForm.length; idx++) {\r\n\t\t\t\tvar filterPath = stdFiltersArrayForm[idx];\r\n\t\t\t\tif( typeof filterPath === \"string\" ) {\r\n\t\t\t\t\tif(filterPath == path)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\tif( filterPath instanceof RegExp) {\r\n\t\t\t\t\tif(filterPath.test(path))\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\telse\r\n\t\t\t\tif( typeof filterPath === \"function\") {\r\n\t\t\t\t\tif(filterPath(obj, name, path))\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn idx!=stdFiltersArrayForm.length;\r\n\t\t}\r\n\t\t\r\n\t\tfunction toArrayAccessForm(obj, childName, path) {\r\n\t\t\tswitch(config.arrayAccessForm) {\r\n\t\t\t\tcase \"property\":\r\n\t\t\t\t\tif(!(obj[childName] instanceof Array))\r\n\t\t\t\t\t\tobj[childName+\"_asArray\"] = [obj[childName]];\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tobj[childName+\"_asArray\"] = obj[childName];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t/*case \"none\":\r\n\t\t\t\t\tbreak;*/\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\r\n\t\t\t\tif(checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {\r\n\t\t\t\t\tobj[childName] = [obj[childName]];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction fromXmlDateTime(prop) {\r\n\t\t\t// Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\r\n\t\t\t// Improved to support full spec and optional parts\r\n\t\t\tvar bits = prop.split(/[-T:+Z]/g);\r\n\t\t\t\r\n\t\t\tvar d = new Date(bits[0], bits[1]-1, bits[2]);\t\t\t\r\n\t\t\tvar secondBits = bits[5].split(\"\\.\");\r\n\t\t\td.setHours(bits[3], bits[4], secondBits[0]);\r\n\t\t\tif(secondBits.length>1)\r\n\t\t\t\td.setMilliseconds(secondBits[1]);\r\n\t\r\n\t\t\t// Get supplied time zone offset in minutes\r\n\t\t\tif(bits[6] && bits[7]) {\r\n\t\t\t\tvar offsetMinutes = bits[6] * 60 + Number(bits[7]);\r\n\t\t\t\tvar sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop)? '-' : '+';\r\n\t\r\n\t\t\t\t// Apply the sign\r\n\t\t\t\toffsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);\r\n\t\r\n\t\t\t\t// Apply offset and local timezone\r\n\t\t\t\td.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tif(prop.indexOf(\"Z\", prop.length - 1) !== -1) {\r\n\t\t\t\t\td = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t// d is now a local time equivalent to the supplied time\r\n\t\t\treturn d;\r\n\t\t}\r\n\t\t\r\n\t\tfunction checkFromXmlDateTimePaths(value, childName, fullPath) {\r\n\t\t\tif(config.datetimeAccessFormPaths.length > 0) {\r\n\t\t\t\tvar path = fullPath.split(\"\\.#\")[0];\r\n\t\t\t\tif(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {\r\n\t\t\t\t\treturn fromXmlDateTime(value);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\treturn value;\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn value;\r\n\t\t}\r\n\t\t\r\n\t\tfunction checkXmlElementsFilter(obj, childType, childName, childPath) {\r\n\t\t\tif( childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {\r\n\t\t\t\treturn checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn true;\r\n\t\t}\t\r\n\t\r\n\t\tfunction parseDOMChildren( node, path ) {\r\n\t\t\tif(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\r\n\t\t\t\tvar result = new Object;\r\n\t\t\t\tvar nodeChildren = node.childNodes;\r\n\t\t\t\t// Alternative for firstElementChild which is not supported in some environments\r\n\t\t\t\tfor(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n\t\t\t\t\tvar child = nodeChildren.item(cidx);\r\n\t\t\t\t\tif(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n\t\t\t\t\t\tvar childName = getNodeLocalName(child);\r\n\t\t\t\t\t\tresult[childName] = parseDOMChildren(child, childName);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\tif(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n\t\t\t\tvar result = new Object;\r\n\t\t\t\tresult.__cnt=0;\r\n\t\t\t\t\r\n\t\t\t\tvar nodeChildren = node.childNodes;\r\n\t\t\t\t\r\n\t\t\t\t// Children nodes\r\n\t\t\t\tfor(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n\t\t\t\t\tvar child = nodeChildren.item(cidx); // nodeChildren[cidx];\r\n\t\t\t\t\tvar childName = getNodeLocalName(child);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {\r\n\t\t\t\t\t\tvar childPath = path+\".\"+childName;\r\n\t\t\t\t\t\tif (checkXmlElementsFilter(result,child.nodeType,childName,childPath)) {\r\n\t\t\t\t\t\t\tresult.__cnt++;\r\n\t\t\t\t\t\t\tif(result[childName] == null) {\r\n\t\t\t\t\t\t\t\tresult[childName] = parseDOMChildren(child, childPath);\r\n\t\t\t\t\t\t\t\ttoArrayAccessForm(result, childName, childPath);\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif(result[childName] != null) {\r\n\t\t\t\t\t\t\t\t\tif( !(result[childName] instanceof Array)) {\r\n\t\t\t\t\t\t\t\t\t\tresult[childName] = [result[childName]];\r\n\t\t\t\t\t\t\t\t\t\ttoArrayAccessForm(result, childName, childPath);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t(result[childName])[result[childName].length] = parseDOMChildren(child, childPath);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Attributes\r\n\t\t\t\tfor(var aidx=0; aidx <node.attributes.length; aidx++) {\r\n\t\t\t\t\tvar attr = node.attributes.item(aidx); // [aidx];\r\n\t\t\t\t\tresult.__cnt++;\r\n\t\t\t\t\tresult[config.attributePrefix+attr.name]=attr.value;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Node namespace prefix\r\n\t\t\t\tvar nodePrefix = getNodePrefix(node);\r\n\t\t\t\tif(nodePrefix!=null && nodePrefix!=\"\") {\r\n\t\t\t\t\tresult.__cnt++;\r\n\t\t\t\t\tresult.__prefix=nodePrefix;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(result[\"#text\"]!=null) {\t\t\t\t\r\n\t\t\t\t\tresult.__text = result[\"#text\"];\r\n\t\t\t\t\tif(result.__text instanceof Array) {\r\n\t\t\t\t\t\tresult.__text = result.__text.join(\"\\n\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//if(config.escapeMode)\r\n\t\t\t\t\t//\tresult.__text = unescapeXmlChars(result.__text);\r\n\t\t\t\t\tif(config.stripWhitespaces)\r\n\t\t\t\t\t\tresult.__text = result.__text.trim();\r\n\t\t\t\t\tdelete result[\"#text\"];\r\n\t\t\t\t\tif(config.arrayAccessForm==\"property\")\r\n\t\t\t\t\t\tdelete result[\"#text_asArray\"];\r\n\t\t\t\t\tresult.__text = checkFromXmlDateTimePaths(result.__text, childName, path+\".\"+childName);\r\n\t\t\t\t}\r\n\t\t\t\tif(result[\"#cdata-section\"]!=null) {\r\n\t\t\t\t\tresult.__cdata = result[\"#cdata-section\"];\r\n\t\t\t\t\tdelete result[\"#cdata-section\"];\r\n\t\t\t\t\tif(config.arrayAccessForm==\"property\")\r\n\t\t\t\t\t\tdelete result[\"#cdata-section_asArray\"];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif( result.__cnt == 0 && config.emptyNodeForm==\"text\" ) {\r\n\t\t\t\t\tresult = '';\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\tif( result.__cnt == 1 && result.__text!=null  ) {\r\n\t\t\t\t\tresult = result.__text;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\tif( result.__cnt == 1 && result.__cdata!=null && !config.keepCData  ) {\r\n\t\t\t\t\tresult = result.__cdata;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\telse\t\t\t\r\n\t\t\t\tif ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {\r\n\t\t\t\t\tif( (config.stripWhitespaces && result.__text==\"\") || (result.__text.trim()==\"\")) {\r\n\t\t\t\t\t\tdelete result.__text;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete result.__cnt;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {\r\n\t\t\t\t\tresult.toString = function() {\r\n\t\t\t\t\t\treturn (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\tif(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\r\n\t\t\t\treturn node.nodeValue;\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction startTag(jsonObj, element, attrList, closed) {\r\n\t\t\tvar resultStr = \"<\"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+\":\"):\"\") + element;\r\n\t\t\tif(attrList!=null) {\r\n\t\t\t\tfor(var aidx = 0; aidx < attrList.length; aidx++) {\r\n\t\t\t\t\tvar attrName = attrList[aidx];\r\n\t\t\t\t\tvar attrVal = jsonObj[attrName];\r\n\t\t\t\t\tif(config.escapeMode)\r\n\t\t\t\t\t\tattrVal=escapeXmlChars(attrVal);\r\n\t\t\t\t\tresultStr+=\" \"+attrName.substr(config.attributePrefix.length)+\"=\";\r\n\t\t\t\t\tif(config.useDoubleQuotes)\r\n\t\t\t\t\t\tresultStr+='\"'+attrVal+'\"';\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresultStr+=\"'\"+attrVal+\"'\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!closed)\r\n\t\t\t\tresultStr+=\">\";\r\n\t\t\telse\r\n\t\t\t\tresultStr+=\"/>\";\r\n\t\t\treturn resultStr;\r\n\t\t}\r\n\t\t\r\n\t\tfunction endTag(jsonObj,elementName) {\r\n\t\t\treturn \"</\"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+\":\"):\"\")+elementName+\">\";\r\n\t\t}\r\n\t\t\r\n\t\tfunction endsWith(str, suffix) {\r\n\t\t\treturn str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n\t\t}\r\n\t\t\r\n\t\tfunction jsonXmlSpecialElem ( jsonObj, jsonObjField ) {\r\n\t\t\tif((config.arrayAccessForm==\"property\" && endsWith(jsonObjField.toString(),(\"_asArray\"))) \r\n\t\t\t\t\t|| jsonObjField.toString().indexOf(config.attributePrefix)==0 \r\n\t\t\t\t\t|| jsonObjField.toString().indexOf(\"__\")==0\r\n\t\t\t\t\t|| (jsonObj[jsonObjField] instanceof Function) )\r\n\t\t\t\treturn true;\r\n\t\t\telse\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction jsonXmlElemCount ( jsonObj ) {\r\n\t\t\tvar elementsCnt = 0;\r\n\t\t\tif(jsonObj instanceof Object ) {\r\n\t\t\t\tfor( var it in jsonObj  ) {\r\n\t\t\t\t\tif(jsonXmlSpecialElem ( jsonObj, it) )\r\n\t\t\t\t\t\tcontinue;\t\t\t\r\n\t\t\t\t\telementsCnt++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn elementsCnt;\r\n\t\t}\r\n\t\t\r\n\t\tfunction checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {\r\n\t\t\treturn config.jsonPropertiesFilter.length == 0\r\n\t\t\t\t|| jsonObjPath==\"\"\r\n\t\t\t\t|| checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction parseJSONAttributes ( jsonObj ) {\r\n\t\t\tvar attrList = [];\r\n\t\t\tif(jsonObj instanceof Object ) {\r\n\t\t\t\tfor( var ait in jsonObj  ) {\r\n\t\t\t\t\tif(ait.toString().indexOf(\"__\")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {\r\n\t\t\t\t\t\tattrList.push(ait);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn attrList;\r\n\t\t}\r\n\t\t\r\n\t\tfunction parseJSONTextAttrs ( jsonTxtObj ) {\r\n\t\t\tvar result =\"\";\r\n\t\t\t\r\n\t\t\tif(jsonTxtObj.__cdata!=null) {\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\tresult+=\"<![CDATA[\"+jsonTxtObj.__cdata+\"]]>\";\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(jsonTxtObj.__text!=null) {\t\t\t\r\n\t\t\t\tif(config.escapeMode)\r\n\t\t\t\t\tresult+=escapeXmlChars(jsonTxtObj.__text);\r\n\t\t\t\telse\r\n\t\t\t\t\tresult+=jsonTxtObj.__text;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction parseJSONTextObject ( jsonTxtObj ) {\r\n\t\t\tvar result =\"\";\r\n\t\r\n\t\t\tif( jsonTxtObj instanceof Object ) {\r\n\t\t\t\tresult+=parseJSONTextAttrs ( jsonTxtObj );\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tif(jsonTxtObj!=null) {\r\n\t\t\t\t\tif(config.escapeMode)\r\n\t\t\t\t\t\tresult+=escapeXmlChars(jsonTxtObj);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult+=jsonTxtObj;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction getJsonPropertyPath(jsonObjPath, jsonPropName) {\r\n\t\t\tif (jsonObjPath===\"\") {\r\n\t\t\t\treturn jsonPropName;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn jsonObjPath+\".\"+jsonPropName;\r\n\t\t}\r\n\t\t\r\n\t\tfunction parseJSONArray ( jsonArrRoot, jsonArrObj, attrList, jsonObjPath ) {\r\n\t\t\tvar result = \"\"; \r\n\t\t\tif(jsonArrRoot.length == 0) {\r\n\t\t\t\tresult+=startTag(jsonArrRoot, jsonArrObj, attrList, true);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\r\n\t\t\t\t\tresult+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\r\n\t\t\t\t\tresult+=parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath,jsonArrObj));\r\n\t\t\t\t\tresult+=endTag(jsonArrRoot[arIdx],jsonArrObj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction parseJSONObject ( jsonObj, jsonObjPath ) {\r\n\t\t\tvar result = \"\";\t\r\n\t\r\n\t\t\tvar elementsCnt = jsonXmlElemCount ( jsonObj );\r\n\t\t\t\r\n\t\t\tif(elementsCnt > 0) {\r\n\t\t\t\tfor( var it in jsonObj ) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(jsonXmlSpecialElem ( jsonObj, it) || (jsonObjPath!=\"\" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath,it))) )\r\n\t\t\t\t\t\tcontinue;\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar subObj = jsonObj[it];\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar attrList = parseJSONAttributes( subObj )\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(subObj == null || subObj == undefined) {\r\n\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\tif(subObj instanceof Object) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(subObj instanceof Array) {\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult+=parseJSONArray( subObj, it, attrList, jsonObjPath );\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(subObj instanceof Date) {\r\n\t\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, false);\r\n\t\t\t\t\t\t\tresult+=subObj.toISOString();\r\n\t\t\t\t\t\t\tresult+=endTag(subObj,it);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar subObjElementsCnt = jsonXmlElemCount ( subObj );\r\n\t\t\t\t\t\t\tif(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {\r\n\t\t\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, false);\r\n\t\t\t\t\t\t\t\tresult+=parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath,it));\r\n\t\t\t\t\t\t\t\tresult+=endTag(subObj,it);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresult+=startTag(subObj, it, attrList, false);\r\n\t\t\t\t\t\tresult+=parseJSONTextObject(subObj);\r\n\t\t\t\t\t\tresult+=endTag(subObj,it);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult+=parseJSONTextObject(jsonObj);\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tthis.parseXmlString = function(xmlDocStr) {\r\n\t\t\tvar isIEParser = window.ActiveXObject || \"ActiveXObject\" in window;\r\n\t\t\tif (xmlDocStr === undefined) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar xmlDoc;\r\n\t\t\tif (window.DOMParser) {\r\n\t\t\t\tvar parser=new window.DOMParser();\t\t\t\r\n\t\t\t\tvar parsererrorNS = null;\r\n\t\t\t\t// IE9+ now is here\r\n\t\t\t\tif(!isIEParser) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tparsererrorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(err) {\t\t\t\t\t\r\n\t\t\t\t\t\tparsererrorNS = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\txmlDoc = parser.parseFromString( xmlDocStr, \"text/xml\" );\r\n\t\t\t\t\tif( parsererrorNS!= null && xmlDoc.getElementsByTagNameNS(parsererrorNS, \"parsererror\").length > 0) {\r\n\t\t\t\t\t\t//throw new Error('Error parsing XML: '+xmlDocStr);\r\n\t\t\t\t\t\txmlDoc = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(err) {\r\n\t\t\t\t\txmlDoc = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// IE :(\r\n\t\t\t\tif(xmlDocStr.indexOf(\"<?\")==0) {\r\n\t\t\t\t\txmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf(\"?>\") + 2 );\r\n\t\t\t\t}\r\n\t\t\t\txmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n\t\t\t\txmlDoc.async=\"false\";\r\n\t\t\t\txmlDoc.loadXML(xmlDocStr);\r\n\t\t\t}\r\n\t\t\treturn xmlDoc;\r\n\t\t};\r\n\t\t\r\n\t\tthis.asArray = function(prop) {\r\n\t\t\tif (prop === undefined || prop == null)\r\n\t\t\t\treturn [];\r\n\t\t\telse\r\n\t\t\tif(prop instanceof Array)\r\n\t\t\t\treturn prop;\r\n\t\t\telse\r\n\t\t\t\treturn [prop];\r\n\t\t};\r\n\t\t\r\n\t\tthis.toXmlDateTime = function(dt) {\r\n\t\t\tif(dt instanceof Date)\r\n\t\t\t\treturn dt.toISOString();\r\n\t\t\telse\r\n\t\t\tif(typeof(dt) === 'number' )\r\n\t\t\t\treturn new Date(dt).toISOString();\r\n\t\t\telse\t\r\n\t\t\t\treturn null;\r\n\t\t};\r\n\t\t\r\n\t\tthis.asDateTime = function(prop) {\r\n\t\t\tif(typeof(prop) == \"string\") {\r\n\t\t\t\treturn fromXmlDateTime(prop);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\treturn prop;\r\n\t\t};\r\n\t\r\n\t\tthis.xml2json = function (xmlDoc) {\r\n\t\t\treturn parseDOMChildren ( xmlDoc );\r\n\t\t};\r\n\t\t\r\n\t\tthis.xml_str2json = function (xmlDocStr) {\r\n\t\t\tvar xmlDoc = this.parseXmlString(xmlDocStr);\r\n\t\t\tif(xmlDoc!=null)\r\n\t\t\t\treturn this.xml2json(xmlDoc);\r\n\t\t\telse\r\n\t\t\t\treturn null;\r\n\t\t};\r\n\t\r\n\t\tthis.json2xml_str = function (jsonObj) {\r\n\t\t\treturn parseJSONObject ( jsonObj, \"\" );\r\n\t\t};\r\n\t\r\n\t\tthis.json2xml = function (jsonObj) {\r\n\t\t\tvar xmlDocStr = this.json2xml_str (jsonObj);\r\n\t\t\treturn this.parseXmlString(xmlDocStr);\r\n\t\t};\r\n\t\t\r\n\t\tthis.getVersion = function () {\r\n\t\t\treturn VERSION;\r\n\t\t};\t\r\n\t}\r\n}))","responseBase64":false,"responseHeaders":{"Date":"Fri, 26 May 2017 20:00:28 GMT","Content-Encoding":"gzip","ETag":"\"5a20a3bf9171d21:0\"","Last-Modified":"Wed, 18 Jan 2017 13:49:54 GMT","Server":"Microsoft-IIS/7.5","X-Powered-By":"ASP.NET","Vary":"Accept-Encoding","Content-Type":"application/x-javascript","Access-Control-Allow-Origin":"*","Accept-Ranges":"bytes","Content-Length":"5968"}}